type Guest {
  id: ID!
  firstName: String!
  lastName: String!
  group: String!
  plusOneAllowed: Boolean!
  overTwentyOne: Boolean
  rsvp: String
  rsvpDate: AWSDate
  attendingRehearsalDinner: Boolean
  plusOneDinner: String
  plusOneName: String
  dinnerOption: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelGuestConnection {
  items: [Guest]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelGuestFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  group: ModelStringInput
  plusOneAllowed: ModelBooleanInput
  overTwentyOne: ModelBooleanInput
  rsvp: ModelStringInput
  rsvpDate: ModelStringInput
  attendingRehearsalDinner: ModelBooleanInput
  plusOneDinner: ModelStringInput
  plusOneName: ModelStringInput
  dinnerOption: ModelStringInput
  and: [ModelGuestFilterInput]
  or: [ModelGuestFilterInput]
  not: ModelGuestFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getGuest(id: ID!): Guest
  listGuests(filter: ModelGuestFilterInput, limit: Int, nextToken: String): ModelGuestConnection
  searchGuests(filter: SearchableGuestFilterInput, sort: SearchableGuestSortInput, limit: Int, nextToken: String, from: Int): SearchableGuestConnection
}

input CreateGuestInput {
  id: ID
  firstName: String!
  lastName: String!
  group: String!
  plusOneAllowed: Boolean!
  overTwentyOne: Boolean
  rsvp: String
  rsvpDate: AWSDate
  attendingRehearsalDinner: Boolean
  plusOneDinner: String
  plusOneName: String
  dinnerOption: String
}

input UpdateGuestInput {
  id: ID!
  firstName: String
  lastName: String
  group: String
  plusOneAllowed: Boolean
  overTwentyOne: Boolean
  rsvp: String
  rsvpDate: AWSDate
  attendingRehearsalDinner: Boolean
  plusOneDinner: String
  plusOneName: String
  dinnerOption: String
}

input DeleteGuestInput {
  id: ID
}

type Mutation {
  createGuest(input: CreateGuestInput!, condition: ModelGuestConditionInput): Guest
  updateGuest(input: UpdateGuestInput!, condition: ModelGuestConditionInput): Guest
  deleteGuest(input: DeleteGuestInput!, condition: ModelGuestConditionInput): Guest
}

input ModelGuestConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  group: ModelStringInput
  plusOneAllowed: ModelBooleanInput
  overTwentyOne: ModelBooleanInput
  rsvp: ModelStringInput
  rsvpDate: ModelStringInput
  attendingRehearsalDinner: ModelBooleanInput
  plusOneDinner: ModelStringInput
  plusOneName: ModelStringInput
  dinnerOption: ModelStringInput
  and: [ModelGuestConditionInput]
  or: [ModelGuestConditionInput]
  not: ModelGuestConditionInput
}

type Subscription {
  onCreateGuest: Guest @aws_subscribe(mutations: ["createGuest"])
  onUpdateGuest: Guest @aws_subscribe(mutations: ["updateGuest"])
  onDeleteGuest: Guest @aws_subscribe(mutations: ["deleteGuest"])
}

input SearchableStringFilterInput {
  ne: String
  gt: String
  lt: String
  gte: String
  lte: String
  eq: String
  match: String
  matchPhrase: String
  matchPhrasePrefix: String
  multiMatch: String
  exists: Boolean
  wildcard: String
  regexp: String
  range: [String]
}

input SearchableIntFilterInput {
  ne: Int
  gt: Int
  lt: Int
  gte: Int
  lte: Int
  eq: Int
  range: [Int]
}

input SearchableFloatFilterInput {
  ne: Float
  gt: Float
  lt: Float
  gte: Float
  lte: Float
  eq: Float
  range: [Float]
}

input SearchableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input SearchableIDFilterInput {
  ne: ID
  gt: ID
  lt: ID
  gte: ID
  lte: ID
  eq: ID
  match: ID
  matchPhrase: ID
  matchPhrasePrefix: ID
  multiMatch: ID
  exists: Boolean
  wildcard: ID
  regexp: ID
  range: [ID]
}

input SearchableGuestFilterInput {
  id: SearchableIDFilterInput
  firstName: SearchableStringFilterInput
  lastName: SearchableStringFilterInput
  group: SearchableStringFilterInput
  plusOneAllowed: SearchableBooleanFilterInput
  overTwentyOne: SearchableBooleanFilterInput
  rsvp: SearchableStringFilterInput
  rsvpDate: SearchableStringFilterInput
  attendingRehearsalDinner: SearchableBooleanFilterInput
  plusOneDinner: SearchableStringFilterInput
  plusOneName: SearchableStringFilterInput
  dinnerOption: SearchableStringFilterInput
  and: [SearchableGuestFilterInput]
  or: [SearchableGuestFilterInput]
  not: SearchableGuestFilterInput
}

enum SearchableSortDirection {
  asc
  desc
}

enum SearchableGuestSortableFields {
  id
  firstName
  lastName
  group
  plusOneAllowed
  overTwentyOne
  rsvp
  rsvpDate
  attendingRehearsalDinner
  plusOneDinner
  plusOneName
  dinnerOption
}

input SearchableGuestSortInput {
  field: SearchableGuestSortableFields
  direction: SearchableSortDirection
}

type SearchableGuestConnection {
  items: [Guest]
  nextToken: String
  total: Int
}
